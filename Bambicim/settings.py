"""
Django settings for Bambicim project.
Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

from config.env import env  # your small env helper

# -----------------------------------------------------------------------------
# Paths
# -----------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# -----------------------------------------------------------------------------
# Core config
# -----------------------------------------------------------------------------
SECRET_KEY = env("DJANGO_SECRET_KEY", "dev-secret-unsafe")
DEBUG = env("DJANGO_DEBUG", True, cast=bool)

ALLOWED_HOSTS = env(
    "ALLOWED_HOSTS",
    default="bambicim.com,www.bambicim.com,.onrender.com,127.0.0.1,localhost,.ngrok-free.app",
    cast=list,
)

CSRF_TRUSTED_ORIGINS = env(
    "CSRF_TRUSTED_ORIGINS",
    default="https://bambicim.com,https://www.bambicim.com,https://*.onrender.com,https://*.ngrok-free.app",
    cast=list,
)

# Canonical host used by CanonicalHostRedirectMiddleware (prod only)
CANONICAL_HOST = env("CANONICAL_HOST", default="bambicim.com")

# -----------------------------------------------------------------------------
# Security (strict in PROD, relaxed in DEV)
# -----------------------------------------------------------------------------
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = None
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

# Cookie & header hardening (relaxed in dev)
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# -----------------------------------------------------------------------------
# Applications
# -----------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",

    # Put this BEFORE staticfiles per WhiteNoise docs
    "whitenoise.runserver_nostatic",

    "django.contrib.staticfiles",

    "core.apps.BambiConfig",
    "accounts",
    "portfolio",
    "django.contrib.sitemaps",
    "channels",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",

    # WhiteNoise should be directly after SecurityMiddleware
    "whitenoise.middleware.WhiteNoiseMiddleware",

    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # your canonical host redirect (keep at the end of your own middlewares)
    "Bambicim.middleware.CanonicalHostRedirectMiddleware",
]

ROOT_URLCONF = "Bambicim.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "portfolio.context_processors.featured_projects",
            ],
        },
    },
]

WSGI_APPLICATION = "Bambicim.wsgi.application"

# -----------------------------------------------------------------------------
# Database
# -----------------------------------------------------------------------------
db_url = os.environ.get("DATABASE_URL", "")

DATABASES = {
    "default": dj_database_url.parse(
        db_url,
        conn_max_age=600,
        ssl_require=os.environ.get("DJANGO_DB_SSL") == "1",
    ) if db_url else {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# -----------------------------------------------------------------------------
# Password validation
# -----------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -----------------------------------------------------------------------------
# Internationalization
# -----------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -----------------------------------------------------------------------------
# Static files
# -----------------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # output only

# Enable long-term caching with hashed filenames in production
if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -----------------------------------------------------------------------------
# Logging
#   - DEV: console-only (no rotation â†’ avoids WinError 32 on Windows)
#   - PROD: keep TimedRotatingFileHandler for app & django logs
# -----------------------------------------------------------------------------
LOG_DIR = BASE_DIR / "logs"
os.makedirs(LOG_DIR, exist_ok=True)

COMMON_LOG_FORMATTERS = {
    "verbose": {"format": "[{levelname}] {asctime} {name} - {message}", "style": "{"},
    "simple": {"format": "[{levelname}] {message}", "style": "{"},
}

if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": COMMON_LOG_FORMATTERS,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        },
        "loggers": {
            "django": {"handlers": ["console"], "level": "INFO", "propagate": True},
            "app": {"handlers": ["console"], "level": "INFO"},
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": COMMON_LOG_FORMATTERS,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
            "file_app": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": LOG_DIR / "app.log",
                "when": "midnight",
                "backupCount": 14,
                "formatter": "verbose",
                "encoding": "utf-8",
            },
            "file_django": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": LOG_DIR / "django.log",
                "when": "midnight",
                "backupCount": 14,
                "formatter": "verbose",
                "encoding": "utf-8",
            },
        },
        "loggers": {
            "django": {"handlers": ["console", "file_django"], "level": "INFO", "propagate": True},
            "app": {"handlers": ["console", "file_app"], "level": "INFO"},
        },
    }

# -----------------------------------------------------------------------------
# Email (as you had; working previously)
# -----------------------------------------------------------------------------
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ["EMAIL_HOST"]
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "True") == "True"
EMAIL_USE_SSL = os.environ.get("EMAIL_USE_SSL", "False") == "True"
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
EMAIL_TIMEOUT = 20

# -----------------------------------------------------------------------------
# Auth redirects
# -----------------------------------------------------------------------------
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
LOGIN_URL = "login"

# ASGI / Channels
ASGI_APPLICATION = "Bambicim.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}
