"""
Django settings for Bambicim project.
Generated by 'django-admin startproject' using Django 5.2.5.
"""
import os
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

# If you truly have this helper, keep it; otherwise swap to a tiny shim:
try:
    from config.env import env  # your helper
except Exception:
    def env(key, default=None, cast=str):
        val = os.getenv(key, default)
        if cast is bool:
            return str(val).lower() in {"1", "true", "yes", "on"}
        if cast is list:
            return [x.strip() for x in str(val or "").split(",") if x.strip()]
        return val

# ----------------------------------------------------------------------------- #
# Paths
# ----------------------------------------------------------------------------- #
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# ----------------------------------------------------------------------------- #
# Core config
# ----------------------------------------------------------------------------- #
SECRET_KEY = env("DJANGO_SECRET_KEY", "dev-secret-unsafe")
DEBUG = env("DJANGO_DEBUG", True, cast=bool)

ALLOWED_HOSTS = env(
    "ALLOWED_HOSTS",
    default="bambicim.com,www.bambicim.com,.onrender.com,127.0.0.1,localhost,.ngrok-free.app",
    cast=list,
)

CSRF_TRUSTED_ORIGINS = env(
    "CSRF_TRUSTED_ORIGINS",
    default="https://bambicim.com,https://www.bambicim.com,https://*.onrender.com,https://*.ngrok-free.app",
    cast=list,
)

CANONICAL_HOST = env("CANONICAL_HOST", default="bambicim.com")

# ----------------------------------------------------------------------------- #
# Security
# ----------------------------------------------------------------------------- #
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "1") == "1"
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = None
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# ----------------------------------------------------------------------------- #
# Applications
# ----------------------------------------------------------------------------- #
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",

    # WhiteNoise: keep this before staticfiles
    "whitenoise.runserver_nostatic",

    "django.contrib.staticfiles",

    "core.apps.BambiConfig",
    "accounts",
    "portfolio",
    "django.contrib.sitemaps",
    "copilot",
    "blog",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.TrafficMiddleware",
]

ROOT_URLCONF = "Bambicim.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "portfolio.context_processors.featured_projects",  # ensure this exists
            ],
        },
    },
]

WSGI_APPLICATION = "Bambicim.wsgi.application"
# ASGI_APPLICATION = "Bambicim.asgi.application"  # ðŸš« removed (no channels)

# ----------------------------------------------------------------------------- #
# Database
# ----------------------------------------------------------------------------- #
db_url = os.environ.get("DATABASE_URL", "")

DATABASES = {
    "default": dj_database_url.parse(
        db_url,
        conn_max_age=600,
        ssl_require=os.environ.get("DJANGO_DB_SSL") == "1",
    ) if db_url else {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# ----------------------------------------------------------------------------- #
# Password validation
# ----------------------------------------------------------------------------- #
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ----------------------------------------------------------------------------- #
# Internationalization
# ----------------------------------------------------------------------------- #
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ----------------------------------------------------------------------------- #
# Static & media  âœ¨ **FIXED RENDER MEDIA ROOT LOGIC HERE** âœ¨
# ----------------------------------------------------------------------------- #

# Static
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# If you keep a local /static directory for dev:
STATICFILES_DIRS = [BASE_DIR / "static"]

# Media  âœ… IMPORTANT
MEDIA_URL = "/media/"  # leading & trailing slashes are crucial
MEDIA_ROOT = BASE_DIR / "media"  # or a persistent disk path in production

# Django 4.2+ storages (recommended)
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",  # media
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

BAMBI_COPILOT_ENABLED = True

if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
BMB_MODEL = os.getenv("BMB_MODEL", "gpt-4o-mini")
BMB_SYS_PERSONA = os.getenv("BMB_SYS_PERSONA", "")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------------------------------------------------------------------- #
# Logging
# ----------------------------------------------------------------------------- #
LOG_DIR = BASE_DIR / "logs"
os.makedirs(LOG_DIR, exist_ok=True)

COMMON_LOG_FORMATTERS = {
    "verbose": {"format": "[{levelname}] {asctime} {name} - {message}", "style": "{"},
    "simple": {"format": "[{levelname}] {message}", "style": "{"},
}

if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": COMMON_LOG_FORMATTERS,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        },
        "loggers": {
            "django": {"handlers": ["console"], "level": "INFO", "propagate": True},
            "app": {"handlers": ["console"], "level": "INFO"},
        },
    }
else:
    # Render has ephemeral disk; console is usually enough. Keep files if you want.
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": COMMON_LOG_FORMATTERS,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        },
        "loggers": {
            "django": {"handlers": ["console"], "level": "INFO", "propagate": True},
            "app": {"handlers": ["console"], "level": "INFO"},
        },
    }

# ----------------------------------------------------------------------------- #
# Email
#   Safer defaults: wonâ€™t crash locally if envs missing.
# ----------------------------------------------------------------------------- #
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND") or (
    "django.core.mail.backends.smtp.EmailBackend" if not DEBUG else "django.core.mail.backends.console.EmailBackend"
)

EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER or "noreply@bambicim.com")
CONTACT_RECIPIENT = os.getenv("CONTACT_RECIPIENT", DEFAULT_FROM_EMAIL)
EMAIL_TIMEOUT = 20
