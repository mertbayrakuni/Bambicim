"""
Django settings for Bambicim project.
Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
import secrets
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

# ------------------------------------------------------------------------------
# Paths & env
# ------------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env locally; on platforms like Render/Heroku the env vars are injected
if (BASE_DIR / ".env").exists():
    load_dotenv(BASE_DIR / ".env")
else:
    load_dotenv()


def env_bool(key: str, default: bool = False) -> bool:
    return str(os.getenv(key, "1" if default else "0")).strip().lower() in {
        "1", "true", "yes", "on"
    }


def env_list(key: str, default_csv: str = "") -> list[str]:
    raw = os.getenv(key, default_csv)
    if isinstance(raw, (list, tuple)):
        return list(raw)
    return [s.strip() for s in str(raw).split(",") if s.strip()]


# ------------------------------------------------------------------------------
# Core
# ------------------------------------------------------------------------------
DEBUG = env_bool("DJANGO_DEBUG", True)

# Accept either DJANGO_SECRET_KEY or SECRET_KEY (fallback for different hosts)
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY") or os.getenv("SECRET_KEY")
if not SECRET_KEY:
    if DEBUG:
        # Dev-only: generate a long, random key so deploy check doesn't whine.
        SECRET_KEY = "dev-" + secrets.token_urlsafe(64)
    else:
        raise RuntimeError("DJANGO_SECRET_KEY is missing in production.")

ALLOWED_HOSTS = env_list(
    "ALLOWED_HOSTS",
    "bambicim.com,www.bambicim.com,.onrender.com,127.0.0.1,localhost,.ngrok-free.app",
)

# CSRF trusted origins must include scheme (https://)
CSRF_TRUSTED_ORIGINS = env_list(
    "CSRF_TRUSTED_ORIGINS",
    "https://bambicim.com,https://www.bambicim.com,https://*.onrender.com,https://*.ngrok-free.app",
)

CANONICAL_HOST = os.getenv("CANONICAL_HOST", "bambicim.com")

# ------------------------------------------------------------------------------
# Security
#   Notes:
#   - Most strict flags enable only when DEBUG=False.
#   - You can override via env if needed.
# ------------------------------------------------------------------------------
SECURE_SSL_REDIRECT = env_bool("SECURE_SSL_REDIRECT", not DEBUG)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https") if not DEBUG else None

# HSTS only in production (set ENABLE_HSTS=0 to disable temporarily)
if not DEBUG and env_bool("ENABLE_HSTS", True):
    SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", 31536000))  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# ------------------------------------------------------------------------------
# Applications
# ------------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",

    # WhiteNoise: keep this before staticfiles
    "whitenoise.runserver_nostatic",

    "django.contrib.staticfiles",
    "django.contrib.sitemaps",

    # your apps
    "core.apps.BambiConfig",
    "accounts",
    "portfolio",
    "copilot",
    "blog",
    "editor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.TrafficMiddleware",
]

ROOT_URLCONF = "Bambicim.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "portfolio.context_processors.featured_projects",
            ],
        },
    },
]

WSGI_APPLICATION = "Bambicim.wsgi.application"
# If you bring Channels back later:
# ASGI_APPLICATION = "Bambicim.asgi.application"

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------
DATABASE_URL = os.getenv("DATABASE_URL", "")
DATABASES = {
    "default": dj_database_url.parse(
        DATABASE_URL,
        conn_max_age=int(os.getenv("DB_CONN_MAX_AGE", "600")),
        ssl_require=os.getenv("DJANGO_DB_SSL") == "1",
    ) if DATABASE_URL else {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("TIME_ZONE", "UTC")  # set to "Europe/Istanbul" if you prefer
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Static & Media
# ------------------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    p for p in [
        BASE_DIR / "static",  # optional
        BASE_DIR / "core" / "static",  # your existing folder
    ] if p.exists()
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Django 4.2+ storages
STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},  # media
    "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
}

if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# ------------------------------------------------------------------------------
# Features & third-party keys
# ------------------------------------------------------------------------------
BAMBI_COPILOT_ENABLED = True

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
BMB_MODEL = os.getenv("BMB_MODEL", "gpt-4o-mini")
BMB_SYS_PERSONA = os.getenv("BMB_SYS_PERSONA", "")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------------------------
# Logging
# ------------------------------------------------------------------------------
LOG_DIR = BASE_DIR / "logs"
os.makedirs(LOG_DIR, exist_ok=True)

COMMON_LOG_FORMATTERS = {
    "verbose": {"format": "[{levelname}] {asctime} {name} - {message}", "style": "{"},
    "simple": {"format": "[{levelname}] {message}", "style": "{"},
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": COMMON_LOG_FORMATTERS,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "simple"},
    },
    "loggers": {
        "django": {"handlers": ["console"], "level": "INFO", "propagate": True},
        "app": {"handlers": ["console"], "level": "INFO"},
    },
}

# ------------------------------------------------------------------------------
# Email
# ------------------------------------------------------------------------------
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND") or (
    "django.core.mail.backends.smtp.EmailBackend" if not DEBUG
    else "django.core.mail.backends.console.EmailBackend"
)

EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER or "noreply@bambicim.com")
CONTACT_RECIPIENT = os.getenv("CONTACT_RECIPIENT", DEFAULT_FROM_EMAIL)
EMAIL_TIMEOUT = int(os.getenv("EMAIL_TIMEOUT", 20))
